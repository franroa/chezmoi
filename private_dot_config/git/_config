; TODO https://github.com/SeniorMars/dotfiles/blob/master/.config/git/config
; TODO https://www.youtube.com/watch?v=57x4ZzzCr2Y
[user]
	email = froa@tecnosylva.com
	name = Francisco Roa Prieto
  excludesfile = /home/froa/.config/git/gitignore_global
  signingkey = E84BBC1C47AEF012

[help]
  autocorrect = 50
[alias]
  ; Francisco
    staash = stash --all
  ;
  ;
  ;
  ; Francisco
  ; diff-refactor = \
  ;   -c color.diff.oldMoved='white dim' \
  ;   -c color.diff.oldMovedAlternative='white dim' \
  ;   -c color.diff.newMoved='white dim' \
  ;   -c color.diff.newMovedAlternative='white dim' \
  ;   -c color.diff.newMovedDimmed='white dim' \
  ;   -c color.diff.newMovedAlternativeDimmed='white dim' \
  ;   diff --ignore-blank-lines --color-moved=dimmed-zebra --color-moved-ws=ignore-all-space --minimal
  # List available aliases
  aliases = !git config --get-regexp alias | sed -re 's/alias\\.(\\S*)\\s(.*)$/\\1 = \\2/g'
  # Command shortcuts
  ci = commit
  co = checkout
  st = status
  # Display tree-like log, because default log is a pain…
  lg = log --graph --date=relative --pretty=tformat:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ad)%Creset'
  # Useful when you have to update your last commit
  # with staged files without editing the commit message.
  oops = commit --amend --no-edit
  # Ensure that force-pushing won't lose someone else's work (only mine).
  push-with-lease = push --force-with-lease
  # Rebase won’t trigger hooks on each "replayed" commit.
  # This is an ugly hack that will replay each commit during rebase with the
  # standard `commit` command which will trigger hooks.
  rebase-with-hooks = rebase -x 'git reset --soft HEAD~1 && git commit -C HEAD@{1}'
  # List local commits that were not pushed to remote repository
  review-local = "!git lg @{push}.."
  # Edit last commit message
  reword = commit --amend
  # Undo last commit but keep changed files in stage
  uncommit = reset --soft HEAD~1
  # Remove file(s) from Git but not from disk
  untrack = rm --cache --
  diffvim = difftool --tool=nvimdiff
  a = add
  ; dlog = "!f() { GIT_EXTERNAL_DIFF=difft git log -p --ext-diff; }f"
	aa = add --all
	; aliases = !git config --get-regexp '^alias\\.' | sed 's/alias\\.\\([^ ]*\\) \\(.*\\)/\\1\\ => \\2/'
	bd = branch --delete
	branches = branch --all
	c = commit
	cl = clone --recurse-submodules
	cleanup = !git branch --merged | grep -v '\\*\\|main\\|master\\|develop' | xargs -n 1 -r git branch --delete
co = checkout
	count = shortlog --summary --numbered
	cp = cherry-pick
	d = diff
; 	dev = "!f() { ghq get $1; }
; f"
; 	fc = "!f() { git log --pretty=custom --date=short -S$1; }
; f" ; Find commits by source code
; 	fm = "!f() { git log --pretty=custom --date=short --grep=$1; }
; f" ; Find commits by commit message
	l = pull
	ls = log --graph --oneline
	lsa = log --graph --pretty=custom --all
	lsla = log --pretty=custom --stat --graph --all
	lss = log --stat --pretty=custom --date=short
	mt = mergetool
	nb = checkout -b
	oops = commit --amend --no-edit
	p = push
	pf = push --force-with-lease
	pop = stash pop
	pristine = reset --hard && git clean --force -dx
	rb = rebase --interactive
	rba = rebase --abort
	rbc = rebase --continue
	rbi = rebase --interactive --autosquash
	remotes = remote --verbose
	st = status
; 	sta = "!f() { git stash push --all --include-untracked --message=$1; }
; f" ; Stash everything
	standup = log --since='yesterday' --author='Andrew Snelling'
	tags = tag --long
	undo = reset --soft HEAD^1
  lg1 = log --graph --pretty=format:'%C(bold blue)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(dim white)%an%Creset' --abbrev-commit --
;  lg1 = log --graph --abbrev-commit --color=always --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)' --all
  lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
  lg = lg1
  ss = status
  ap = add -p
  co = checkout
  unadd = reset
  untracked = ls-files --others --exclude-standard -z
  clean = gc --prune=now --aggressive
  o = open
  mr = !sh -c 'git fetch $1 merge-requests/$2/head:mr-$1-$2 && git checkout mr-$1-$2' -# https://about.gitlab.com/blog/2020/04/07/15-git-tips-improve-workflow/#11-add-an-alias-to-check-out-merge-requests-locally

[grep]
  break = true
  heading = true
  lineNumber = true
  # Consider most regexes to be ERE
  extendedRegexp = true

[pager]
  difftool = true
  blame  = delta
  diff   = delta
  reflog = delta
  show   = delta

[core]
  eol = lf
  autocrlf = input
  commentChar = ";"
  filemode = false
  pager = delta --line-numbers
  bare = true
   hooksPath = /home/froa/.config/git/hooks
  excludesfile = /home/froa/.config/git/gitignore_global
   editor = nvim -c 'set ft=gitcommit' -c startinsert!
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ; editor = nvim -c '/]: ' +startinsert!
  ;
  ;
  ;
	; editor = nvim -d \"$LOCAL\" -c \"wincmd w\" -c \"wincmd L\"
  ; editor = nvim -c DiffviewOpen
[filter "lfs"]
  process = git-lfs filter-process
  required = true
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
[interactive]
  ; diffFilter = delta --color-only
  diffFilter = delta --color-only --features=interactive
[pretty]
  dateline = format:%C(yellow)%h%Creset%x09%Cred%<(13)%an%Creset%x09%Cblue%ad%Creset%x09%s
	custom = %Cred%h%Creset %GT trust -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset
[format]
  pretty = dateline
; [log]
  ; decorate = true

[delta]
  ; side-by-side = true
  ; syntax-theme = tokyonight_moon
  light = false      # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
  features = line-numbers decorations colorscheme
  navigate = true    # use n and N to move between diff sections
	whitespace-error-style = 22 reverse
[delta "decorations"]
	commit-decoration-style = bold yellow box ul
	file-style = bold yellow ul
  file-decoration-style = none
[delta "colorscheme"]
  minus-style                   = syntax "#3f2d3d"
  minus-non-emph-style          = syntax "#3f2d3d"
  minus-emph-style              = syntax "#763842"
  minus-empty-line-marker-style = syntax "#3f2d3d"
  line-numbers-minus-style      = "#914c54"
  plus-style                    = syntax "#283b4d"
  plus-non-emph-style           = syntax "#283b4d"
  plus-emph-style               = syntax "#316172"
  plus-empty-line-marker-style  = syntax "#283b4d"
  line-numbers-plus-style       = "#449dab"
  line-numbers-zero-style       = "#3b4261"
  ; minus-style                   = syntax "#3a273a"
  ; minus-non-emph-style          = syntax "#3a273a"
  ; minus-emph-style              = syntax "#6b2e43"
  ; minus-empty-line-marker-style = syntax "#3a273a"
  ; line-numbers-minus-style      = "#b55a67"
  ; plus-style                    = syntax "#273849"
  ; plus-non-emph-style           = syntax "#273849"
  ; plus-emph-style               = syntax "#305f6f"
  ; plus-empty-line-marker-style  = syntax "#273849"
  ; line-numbers-plus-style       = "#627259"
  ; line-numbers-zero-style       = "#3b4261"
[delta "interactive"]
  features = colorscheme
  keep-plus-minus-markers = false


[rebase]
  autosquash = true
[fetch]
  prune = true
[pull]
	rebase = false
[diff]
  # Use better, descriptive initials (c, i, w) instead of a/b.
  mnemonicPrefix = true
  # Show renames/moves as such
  renames = true
  # When using --word-diff, assume --word-diff-regex=.
  wordRegex = .
  # Display submodule-related information (commit listings)
  ; submodule = log
  color =true
	algorithm = patience
	compactionHeuristic = true
  ; tool = diffsitter
  ; tool = nvimdiff
  tool = delta
  ignoreBlankLines = true
  colorMoved = dimmed-zebra
  colorMovedWs = ignore-all-space
  minimal = true
  submodule = log

[difftool "delta"]
  prompt = false
  cmd = delta "$LOCAL" "$REMOTE"
[difftool "diffsitter"]
  prompt = false
  cmd = diffsitter "$LOCAL" "$REMOTE"
[difftool "difft"]
  prompt = false
  cmd = difft --color always "$LOCAL" "$REMOTE"
[difftool "nvimdiff"]
  cmd = nvim -c DiffviewOpen
	; cmd = nvim -d \"$LOCAL\" \"$REMOTE\" -c \"wincmd w\" -c \"wincmd L\"
[commit]
  template = /home/froa/.config/git/commit_template
  verbose = true
  gpgSign = true
[merge]
	tool = "nvim"
  conflictstyle = diff3
  prompt = false
[mergetool]
	keepBackup = false
	prompt = false
[mergetool "nvim"]
  ; cmd = nvim -d $LOCAL $BASE $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'
  cmd = nvim -c DiffviewOpen
[status]
  short = true
  branch = true
  renames = true
  submoduleSummary = true
[push]
  autoSetupRemote = true
  default = current
  ff = only
[init]

  templateDir = ~/.git-template
  defaultBranch = main
; [color]
;   status = always
;   branch = auto
;   blame = auto
;   ui = true

[color "diff"]
	plain = normal
	meta = bold
	frag = cyan
	old = red
	new = green
	commit = yellow
	whitespace = normal red
	 oldMoved = white dim
	 oldMovedAlternative = white dim
	 newMoved = white dim
	 newMovedAlternative = white dim
	 newMovedDimmed = white dim
	 newMovedAlternativeDimmed = white dim
[color "branch"]
	current = green
	local = normal
	remote = red
	plain = normal
[color "status"]
	header = normal
	added = red
	updated = green
	changed = red
	untracked = red
	nobranch = red
[color "grep"]
	match = normal
[color "interactive"]
	prompt = normal
	header = normal
	help = normal
	error = normal
; [credential "https://gitlab.com"]
;   helper = store --file /home/froa/.git-credentials
;   helper = cache --timeout 30000
; [credential "https://github.com"]
; 	helper =
; 	helper = !/usr/bin/gh auth git-credential
; [credential "https://gist.github.com"]
; 	helper =
; 	helper = !/usr/bin/gh auth git-credential
