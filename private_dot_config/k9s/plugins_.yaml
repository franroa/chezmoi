plugins:
  logfmt:
    shortCut: Shift-D
    description: logfmt
    cmd: sh
    args:
      - -c
      - "kubectl logs  $NAME -n $NAMESPACE | logfmt"
    scopes:
      - pods
      - containers
#   # Requires helm-diff plugin installed: https://github.com/databus23/helm-diff
#   # In helm view: <Shift-D> Diff with Previous Revision
#   # In helm-history view: <Shift-Q> Diff with Current Revision
#   helm-diff-previous:
#     shortCut: Shift-D
#     confirm: false
#     description: Diff with Previous Revision
#     scopes:
#       - helm
#     command: bash
#     background: false
#     args:
#       - -c
#       - >-
#         LAST_REVISION=$(($COL-REVISION-1));
#         helm diff revision $COL-NAME $COL-REVISION $LAST_REVISION --kube-context $CONTEXT --namespace $NAMESPACE --color | less -RK
#   helm-diff-current:
#     shortCut: Shift-Q
#     confirm: false
#     description: Diff with Current Revision
#     scopes:
#       - history
#     command: bash
#     background: false
#     args:
#       - -c
#       - >-
#         RELEASE_NAME=$(echo $NAME | cut -d':' -f1);
#         LATEST_REVISION=$(helm history -n $NAMESPACE --kube-context $CONTEXT $RELEASE_NAME | grep deployed | cut -d$'\t' -f1 | tr -d ' \t');
#         helm diff revision $RELEASE_NAME $LATEST_REVISION $COL-REVISION --kube-context $CONTEXT --namespace $NAMESPACE --color | less -RK
#   helm-values:
#     shortCut: v
#     confirm: false
#     description: Values
#     scopes:
#       - helm
#     command: sh
#     background: false
#     args:
#       - -c
#       - "helm get values $COL-NAME -n $NAMESPACE --kube-context $CONTEXT | less -K"
#
#   # kubectl-blame by knight42
#   # Annotate each line in the given resource's YAML with information from the managedFields to show who last modified the field.
#   # Source: https://github.com/knight42/kubectl-blame
#   # Install via:
#   #   krew: `kubectl krew install blame`
#   #   go: `go install github.com/knight42/kubectl-blame@latest`
#   blame:
#     shortCut: b
#     confirm: false
#     description: "Blame"
#     scopes:
#       - all
#     command: sh
#     background: false
#     args:
#       - -c
#       - "kubectl-blame $RESOURCE_NAME $NAME -n $NAMESPACE --context $CONTEXT | less"
#   # Author: Qasim Sarfraz
#   # Trace DNS requests for containers, pods, and nodes
#   # Requires kubectl version 1.30 or later
#   # https://github.com/inspektor-gadget/inspektor-gadget
#   # https://www.inspektor-gadget.io/docs/latest/gadgets/trace_dns
#   trace-dns:
#     shortCut: Shift-D
#     description: Trace DNS requests
#     scopes:
#       - containers
#       - pods
#       - nodes
#     command: bash
#     confirm: false
#     background: false
#     args:
#       - -c
#       - |
#         IG_VERSION=v0.34.0
#         IG_IMAGE=ghcr.io/inspektor-gadget/ig:$IG_VERSION
#         IG_FIELD=k8s.podName,src,dst,qr,qtype,name,rcode,latency_ns
#
#         GREEN='\033[0;32m'
#         RED='\033[0;31m'
#         BLUE='\033[0;34m'
#         NC='\033[0m' # No Color
#
#         # Ensure kubectl version is 1.30 or later
#         KUBECTL_VERSION=$(kubectl version --client | awk '/Client Version:/{print $3}')
#         if [[ "$(echo "$KUBECTL_VERSION" | cut -d. -f2)" -lt 30 ]]; then
#           echo -e "${RED}kubectl version 1.30 or later is required${NC}"
#           sleep 3
#           exit
#         fi
#
#         clear
#
#         # Handle containers
#         if [[ -n "$POD" ]]; then
#           echo -e "${GREEN}Tracing DNS requests for container ${BLUE}${NAME}${GREEN} in pod ${BLUE}${POD}${GREEN} in namespace ${BLUE}${NAMESPACE}${NC}"
#           IG_NODE=$(kubectl get pod "$POD" -n "$NAMESPACE" -o jsonpath='{.spec.nodeName}')
#           kubectl debug --kubeconfig=$KUBECONFIG  --context=$CONTEXT -q \
#             --profile=sysadmin "node/$IG_NODE" -it --image="$IG_IMAGE" -- \
#             ig run trace_dns:$IG_VERSION -F "k8s.podName==$POD" -F "k8s.containerName=$NAME" \
#             --fields "$IG_FIELD"
#             exit
#         fi
#
#         # Handle pods
#         if [[ -n "$NAMESPACE" ]]; then
#           echo -e "${GREEN}Tracing DNS requests for pod ${BLUE}${NAME}${GREEN} in namespace ${BLUE}${NAMESPACE}${NC}"
#           IG_NODE=$(kubectl get pod "$NAME" -n "$NAMESPACE" -o jsonpath='{.spec.nodeName}')
#           kubectl debug --kubeconfig=$KUBECONFIG  --context=$CONTEXT -q \
#             --profile=sysadmin  -it --image="$IG_IMAGE" "node/$IG_NODE" -- \
#             ig run trace_dns:$IG_VERSION -F "k8s.podName==$NAME" \
#             --fields "$IG_FIELD"
#             exit
#         fi
#
#         # Handle nodes
#         echo -e "${GREEN}Tracing DNS requests for node ${BLUE}${NAME}${NC}"
#         kubectl debug --kubeconfig=$KUBECONFIG  --context=$CONTEXT -q \
#           --profile=sysadmin -it --image="$IG_IMAGE" "node/$NAME" -- \
#           ig run trace_dns:$IG_VERSION --fields "$IG_FIELD"
#   # Removes all finalizers from the selected resource. Finalizers are namespaced keys that tell Kubernetes to wait
#   # until specific conditions are met before it fully deletes resources marked for deletion.
#   # Before deleting an object you need to ensure that all finalizers has been removed. Usually this would be done
#   # by the specific controller but under some circumstances it is possible to encounter a set of objects blocked
#   # for deletion.
#   # This plugin makes this task easier by providing a shortcut to directly removing them all.
#   # Be careful when using this plugin as it may leave dangling resources or instantly deleting resources that were
#   # blocked by the finalizers.
#   # Author: github.com/jalvarezit
#   remove_finalizers:
#     shortCut: Ctrl-F
#     confirm: true
#     dangerous: true
#     scopes:
#       - all
#     description: "finalizers"
#     # description: |
#     # removes all finalizers from selected resource. be careful when using it,
#     # it may leave dangling resources or delete them
#     command: kubectl
#     background: true
#     args:
#       - patch
#       - --context
#       - $CONTEXT
#       - --namespace
#       - $NAMESPACE
#       - $RESOURCE_NAME.$RESOURCE_GROUP
#       - $NAME
#       - -p
#       - '{"metadata":{"finalizers":null}}'
#       - --type
#       - merge
#   # Author: Daniel Rubin
#   # Get recommendations for CPU/Memory requests and limits using Robusta KRR
#   # Requires Prometheus in the Cluster and Robusta KRR (https://github.com/robusta-dev/krr) on your system
#   # Open K9s in deployments/daemonsets/statefulsets view, then:
#   # Shift-K to get recommendations
#   krr:
#     shortCut: Shift-K
#     description: Get krr
#     scopes:
#       - deployments
#       - daemonsets
#       - statefulsets
#       - cronjobs
#     command: bash
#     background: false
#     confirm: false
#     args:
#       - -c
#       - |
#         LABELS=$(kubectl get $RESOURCE_NAME $NAME -n $NAMESPACE  --context $CONTEXT  --show-labels | awk '{print $NF}' | awk '{if(NR>1)print}')
#         krr simple --cluster $CONTEXT --selector $LABELS
#         echo "Press 'q' to exit"
#         while : ; do
#         read -n 1 k <&1
#         if [[ $k = q ]] ; then
#         break
#         fi
#         done
#   krr-ns:
#     shortCut: Shift-K
#     description: Get krr
#     scopes:
#       - namespaces
#     command: bash
#     background: false
#     confirm: false
#     args:
#       - -c
#       - |
#         krr simple --cluster $CONTEXT -n $RESOURCE_NAME
#         echo "Press 'q' to exit"
#         while : ; do
#         read -n 1 k <&1
#         if [[ $k = q ]] ; then
#         break
#         fi
#         done
#   # https://grafana.com/docs/loki/latest/query/logcli/
#   # you must set the LOKI_ADDR environment variable ("export LOKI_ADDR=https://loki.internal" in bash) before starting k9s to use logcli
#   loki-container:
#     shortCut: Shift-L
#     description: "loki fmt"
#     scopes:
#       - containers
#     command: logcli
#     background: false
#     args:
#       - query
#       - '{ namespace = "$NAMESPACE", pod = "$POD", container = "$NAME" }'
#       - -f
#   loki-container-raw:
#     shortCut: Ctrl-E
#     description: "loki raw"
#     scopes:
#       - containers
#     command: logcli
#     background: false
#     args:
#       - query
#       - '{ namespace = "$NAMESPACE", pod = "$POD", container = "$NAME" }'
#       - -f
#       - -oraw
#   loki-pods:
#     shortCut: Shift-L
#     description: "loki fmt"
#     scopes:
#       - po
#     command: logcli
#     background: false
#     args:
#       - query
#       - '{ namespace = "$NAMESPACE", pod = "$NAME" }'
#       - -f
#   loki-pods-raw:
#     shortCut: Ctrl-L
#     description: "loki raw"
#     scopes:
#       - po
#     command: logcli
#     background: false
#     args:
#       - query
#       - '{ namespace = "$NAMESPACE", pod = "$NAME" }'
#       - -f
#       - -oraw
#   loki-node:
#     shortCut: Shift-L
#     description: "loki fmt"
#     scopes:
#       - node
#     command: logcli
#     background: false
#     args:
#       - query
#       - '{ node_name = "$NAME" }'
#       - -f
#   loki-node-raw:
#     shortCut: Ctrl-L
#     description: "loki raw"
#     scopes:
#       - node
#     command: logcli
#     background: false
#     args:
#       - query
#       - '{ node_name = "$NAME" }'
#       - -f
#       - -oraw
#   loki-ns:
#     shortCut: Shift-L
#     description: "loki fmt"
#     scopes:
#       - namespace
#     command: logcli
#     background: false
#     args:
#       - query
#       - '{ namespace = "$NAME" }'
#       - -f
#   neat:
#     shortCut: Ctrl-N
#     description: "Neat"
#     scopes:
#       - pod
#     command: sh
#     background: false
#     args:
#       - -c
#       # - "kubectl neat get -- pod $POD -oyaml | kubecolor describe pod --kubecolor-stdin | less -r"
#       - "kubectl neat get -- pod $POD -oyaml | nvim +'set filetype=yaml'"
#   loki-ns-raw:
#     shortCut: Ctrl-L
#     description: "loki raw"
#     scopes:
#       - namespace
#     command: logcli
#     background: false
#     args:
#       - query
#       - '{ namespace = "$NAME" }'
#       - -f
#       - -oraw
#   # stern:
#   #   shortCut: Ctrl-Y
#   #   confirm: false
#   #   description: "Logs <Stern>"
#   #   scopes:
#   #     - pods
#   #   command: stern
#   #   background: false
#   #   args:
#   #     - --color
#   #     - always
#   #     - --tail
#   #     - 50
#   #     - $FILTER
#   #     - -n
#   #     - $NAMESPACE
#   #     - --context
#   #     - $CONTEXT
#   color:
#     shortCut: Ctrl-Y
#     confirm: false
#     description: "Logs <Stern>"
#     scopes:
#       - pods
#     command: kubecolor
#     background: false
#     args:
#       - -n
#       - $NAMESPACE
#       - logs
#       - $POD
#   tree:
#     shortCut: Ctrl-T
#     description: Show Tree
#     command: sh
#     background: false
#     scopes:
#       - deployment
#     args:
#       - -c
#       - "kubectl tree deploy $NAME | less -K"
# # Defines a plugin to provide a `ctrl-l` shortcut to tail the logs while in pod view.
# # argocd:
# #   shortCut: Ctrl-S
# #   confirm: true
# #   description: Sync Argo Application
# #   scopes:
# #     - applications
# #   command: argocd
# #   background: false
# #   args:
# #     - app
# #     - sync
# #     - $NAME
# # #get all resources in a namespace using the krew get-all plugin
# # get-all:
# #   shortCut: g
# #   confirm: false
# #   description: get-all
# #   scopes:
# #     - all
# #   command: sh
# #   background: false
# #   args:
# #     - -c
# #     - "kubectl get all -n $NAMESPACE | less"
# # stern:
# #   shortCut: Ctrl-L
# #   confirm: false
# #   description: "Logs <Stern>"
# #   scopes:
# #     - pods
# #   command: stern
# #   background: false
# #   args:
# #     - --tail
# #     - 50
# #     - $FILTER
# #     - -n
# #     - $NAMESPACE
# #     - --context
# #     - $CONTEXT
# # dive:
# #   shortCut: Shift-D
# #   confirm: false
# #   description: "Dive image"
# #   scopes:
# #     - containers
# #   command: dive
# #   background: false
# #   args:
# #     - $COL-IMAGE
# # helm-default-values:
# #   shortCut: Shift-V
# #   confirm: false
# #   description: Chart Default Values
# #   scopes:
# #     - helm
# #   command: sh
# #   background: false
# #   args:
# #     - -c
# #     - "kubectl get secrets --context $CONTEXT -n $NAMESPACE sh.helm.release.v1.$COL-NAME.v$(helm history -n $NAMESPACE --kube-context $CONTEXT $COL-NAME | grep deployed | cut -d$'\\t' -f1 | tr -d ' \\t') -o yaml | yq e '.data.release' - | base64 -d | base64 -d | gunzip | jq -r '.chart.values' | yq -P | less"
# # helm-purge:
# #   shortCut: Ctrl-P
# #   description: Helm Purge
# #   scopes:
# #     - po
# #   command: kubectl
# #   background: true
# #   args:
# #     - purge
# #     - $NAMESPACE
# #     - $NAME
# # helm-values:
# #   shortCut: v
# #   confirm: false
# #   description: Values
# #   scopes:
# #     - helm
# #   command: sh
# #   background: false
# #   args:
# #     - -c
# #     - "helm get values $COL-NAME -n $NAMESPACE --kube-context $CONTEXT | less"
# # jqlogs:
# #   shortCut: Ctrl-J
# #   confirm: false
# #   description: "Logs (jq)"
# #   scopes:
# #     - po
# #   command: sh
# #   background: false
# #   args:
# #     - -c
# #     - "kubectl jq pod $NAME | less"
# # toggleCronjob:
# #   shortCut: Ctrl-S
# #   confirm: true
# #   scopes:
# #     - cj
# #   description: Toggle to suspend or resume a running cronjob
# #   command: kubectl
# #   background: true
# #   args:
# #     - patch
# #     - cronjobs
# #     - $NAME
# #     - -n
# #     - $NAMESPACE
# #     - --context
# #     - $CONTEXT
# #     - -p
# #     - '{"spec" : {"suspend" : $!COL-SUSPEND }}'
# # flame:
# #   shortCut: Shift-U
# #   confirm: true
# #   description: Execute flame
# #   scopes:
# #     - po
# #   command: kubectl
# #   background: false
# #   args:
# #     - flame
# #     - $NAME
# #     - -l
# #     - java
# # watch-events:
# #   shortCut: Shift-E
# #   confirm: false
# #   description: Get Events
# #   scopes:
# #     - all
# #   command: sh
# #   background: false
# #   args:
# #     - -c
# #     - "watch -n 5 kubectl get events --context $CONTEXT --namespace $NAMESPACE --field-selector involvedObject.name=$NAME"
# # ktop:
# #   shortCut: Shift-K
# #   confirm: true
# #   description: Get Top with advance visualization
# #   scopes:
# #     - all
# #   command: sh
# #   background: false
# #   args:
# #     - -c
# #     - "kubectl ktop | less"
# # score:
# #   shortCut: Shift-Y
# #   confirm: true
# #   description: Score on given namespace
# #   scopes:
# #     - all
# #   command: sh
# #   background: false
# #   args:
# #     - -c
# #     - "kubectl get pods -n $NAMESPACE -o yaml | kubectl score score - | less"
