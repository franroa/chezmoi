return {
  "nvim-neotest/neotest",
  dependencies = {
    "nvim-neotest/nvim-nio",
    "thenbe/neotest-consumers",
    "nvim-neotest/neotest-jest",
    {
      "stevearc/overseer.nvim",
      config = function()
        require("overseer").setup({
          component_aliases = {
            default_neotest = {
              "on_output_summarize",
              "on_exit_set_status",
              "on_complete_notify",
              "on_complete_dispose",
            },
          },
          strategy = {
            "toggleterm",
            -- load your default shell before starting the task
            use_shell = false,
            -- overwrite the default toggleterm "direction" parameter
            direction = nil,
            -- overwrite the default toggleterm "highlights" parameter
            highlights = nil,
            -- overwrite the default toggleterm "auto_scroll" parameter
            auto_scroll = nil,
            -- have the toggleterm window close and delete the terminal buffer
            -- automatically after the task exits
            close_on_exit = false,
            -- have the toggleterm window close without deleting the terminal buffer
            -- automatically after the task exits
            -- can be "never, "success", or "always". "success" will close the window
            -- only if the exit code is 0.
            quit_on_exit = "never",
            -- open the toggleterm window when a task starts
            open_on_start = true,
            -- mirrors the toggleterm "hidden" parameter, and keeps the task from
            -- being rendered in the toggleable window
            hidden = false,
            -- command to run when the terminal is created. Combine with `use_shell`
            -- to run a terminal command before starting the task
            on_create = nil,
          },
        })
      end,
      opts = {},
    },
  },
  opts = {
    -- Can be a list of adapters like what neotest expects,
    -- or a list of adapter names,
    -- or a table of adapter names, mapped to adapter configs.
    -- The adapter will then be automatically loaded with the config.
    adapters = {
      ["neotest-jest"] = {
        jestCommand = "npm test -- --coverage",
        jestConfigFile = "custom.jest.config.ts",
        env = { CI = true },
        cwd = function(path)
          return vim.fn.getcwd()
        end,
      },
    },
    -- Example for loading neotest-go with a custom config
    -- adapters = {
    --   ["neotest-go"] = {
    --     args = { "-tags=integration" },
    --   },
    -- },
    status = { virtual_text = true },
    output = { open_on_run = true },
    quickfix = {
      open = function()
        if LazyVim.has("trouble.nvim") then
          require("trouble").open({ mode = "quickfix", focus = false })
        else
          vim.cmd("copen")
        end
      end,
    },
  },
  config = function(_, opts)
    local neotest_ns = vim.api.nvim_create_namespace("neotest")
    vim.diagnostic.config({
      virtual_text = {
        format = function(diagnostic)
          -- Replace newline and tab characters with space for more compact diagnostics
          local message = diagnostic.message:gsub("\n", " "):gsub("\t", " "):gsub("%s+", " "):gsub("^%s+", "")
          return message
        end,
      },
    }, neotest_ns)

    if LazyVim.has("trouble.nvim") then
      opts.consumers = opts.consumers or {}
      opts.consumers.neotest_consumers = require("neotest-consumers").consumers
      opts.consumers.overseer = require("neotest-consumers").consumers
      opts.overseer = {
        enabled = true,
        force_default = true,
      }
      -- Refresh and auto close trouble after running tests
      ---@type neotest.Consumer
      opts.consumers.trouble = function(client)
        client.listeners.results = function(adapter_id, results, partial)
          if partial then
            return
          end
          local tree = assert(client:get_position(nil, { adapter = adapter_id }))

          local failed = 0
          for pos_id, result in pairs(results) do
            if result.status == "failed" and tree:get_key(pos_id) then
              failed = failed + 1
            end
          end
          vim.schedule(function()
            local trouble = require("trouble")
            if trouble.is_open() then
              trouble.refresh()
              if failed == 0 then
                trouble.close()
              end
            end
          end)
          return {}
        end
      end
    end

    if opts.adapters then
      local adapters = {}
      for name, config in pairs(opts.adapters or {}) do
        if type(name) == "number" then
          if type(config) == "string" then
            config = require(config)
          end
          adapters[#adapters + 1] = config
        elseif config ~= false then
          local adapter = require(name)
          if type(config) == "table" and not vim.tbl_isempty(config) then
            local meta = getmetatable(adapter)
            if adapter.setup then
              adapter.setup(config)
            elseif meta and meta.__call then
              adapter(config)
            else
              error("Adapter " .. name .. " does not support setup")
            end
          end
          adapters[#adapters + 1] = adapter
        end
      end
      opts.adapters = adapters
    end

    require("neotest").setup(opts)
  end,
  -- stylua: ignore
  keys = {
    {"<leader>t", "", desc = "+test"},
    { "<leader>tt", function() require("neotest").run.run(vim.fn.expand("%")) end, desc = "Run File" },
    { "<leader>tT", function() require("neotest").run.run(vim.uv.cwd()) end, desc = "Run All Test Files" },
    { "<leader>tr", function() require("neotest").run.run() end, desc = "Run Nearest" },
    { "<leader>tl", function() require("neotest").run.run_last() end, desc = "Run Last" },
    { "<leader>ts", function() require("neotest").summary.toggle() end, desc = "Toggle Summary" },
    { "<leader>to", function() require("neotest").output.open({ enter = true, auto_close = true }) end, desc = "Show Output" },
    { "<leader>tO", function() require("neotest").output_panel.toggle() end, desc = "Toggle Output Panel" },
    { "<leader>tS", function() require("neotest").run.stop() end, desc = "Stop" },
    { "<leader>tw", function() require("neotest").watch.toggle(vim.fn.expand("%")) end, desc = "Toggle Watch" },
  },
}
