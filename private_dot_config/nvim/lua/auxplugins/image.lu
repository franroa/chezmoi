return {
  -- dir = "~/git/image.nvim/",
  "3rd/image.nvim",
  -- branch = "magick-included",
  lazy = false,
  -- event = "VeryLazy",
  config = function()
    package.path = package.path .. ";" .. vim.fn.expand("$HOME") .. "/.luarocks/share/lua/5.1/?/init.lua;"
    package.path = package.path .. ";" .. vim.fn.expand("$HOME") .. "/.luarocks/share/lua/5.1/?.lua;"
    require("image").setup({
      backend = "kitty",
      lua_version = "5.1", --TODO: chage to version 5.4
      integrations = {
        markdown = {
          enabled = true,
          clear_in_insert_mode = false,
          download_remote_images = true,
          only_render_image_at_cursor = false,
          filetypes = { "markdown", "vimwiki" }, -- markdown extensions (ie. quarto) can go here
        },
        neorg = {
          enabled = true,
          clear_in_insert_mode = false,
          download_remote_images = true,
          only_render_image_at_cursor = false,
          filetypes = { "norg" },
        },
      },
      max_width = nil,
      max_height = nil,
      max_width_window_percentage = nil,
      max_height_window_percentage = 50,
      window_overlap_clear_enabled = false, -- toggles images when windows are overlapped
      window_overlap_clear_ft_ignore = { "cmp_menu", "cmp_docs", "" },
      editor_only_render_when_focused = false, -- auto show/hide images when the editor gains/looses focus
      tmux_show_only_in_active_window = false, -- auto show/hide images in the correct Tmux window (needs visual-activity off)
      hijack_file_patterns = { "*.png", "*.jpg", "*.jpeg", "*.gif", "*.webp" }, -- render image files as images when opened
    })

    local api = require("image")

    -- from a file (absolute path)
    local image = api.from_file("/root/Downloads/web.jpg", {
      id = "my_image_id", -- optional, defaults to a random string
      window = 1000, -- optional, binds image to a window and its bounds
      buffer = 1000, -- optional, binds image to a buffer (paired with window binding)
      with_virtual_padding = true, -- optional, pads vertically with extmarks, defaults to false

      -- optional, binds image to an extmark which it follows. Forced to be true when
      -- `with_virtual_padding` is true. defaults to false.
      inline = true,

      -- geometry (optional)
      x = 1,
      y = 1,
      width = 10,
      height = 10,
    })

    -- from a URL
    api.from_url("https://gist.ro/s/remote.png", {
      -- all the same options from above
    }, function(img)
      vim.notify("entra")
      vim.g.imagetest = img
      img:render() -- render image
      -- do stuff with the image
    end)

    image:render() -- render image
    image:render(geometry) -- update image geometry and render it
    image:clear()

    image:move(x, y) -- move image
    image:brightness(value) -- change brightness
    image:saturation(value) -- change saturation
    image:hue(value) -- change hue
  end,
}
