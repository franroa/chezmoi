----https://github.com/fredrikaverpil/dotfiles/blob/main/nvim-fredrik/lua/fredrik/plugins/core/code_runner.lua
---- vim.bo[0].syntax = "on"
--return {
--  {
--    "nvim-treesitter/nvim-treesitter",
--    lazy = false,
--    branch = "main",
--    build = ":TSUpdate",
--    init = function()
--      local parser_installed = {
--        "python",
--        "go",
--        "c",
--        "lua",
--        "vim",
--        "vimdoc",
--        "query",
--        "markdown_inline",
--        "markdown",
--      }
--
--      vim.defer_fn(function()
--        require("nvim-treesitter").install(parser_installed)
--      end, 1000)
--      require("nvim-treesitter").update()
--      vim.api.nvim_create_autocmd("FileType", {
--        callback = function(details)
--          local bufnr = details.buf
--          if not pcall(vim.treesitter.start, bufnr) then -- try to start treesitter which enables syntax highlighting
--            return -- Exit if treesitter was unable to start
--          end
--          vim.bo[bufnr].syntax = "on" -- Use regex based syntax-highlighting as fallback as some plugins might need it
--          vim.wo.foldlevel = 99
--          vim.wo.foldmethod = "expr"
--          vim.wo.foldexpr = "v:lua.vim.treesitter.foldexpr()" -- Use treesitter for folds
--          vim.bo[bufnr].indentexpr = "v:lua.require'nvim-treesitter'.indentexpr()" -- Use treesitter for indentation
--        end,
--      })
--      -- auto-start highlights & indentation
--      vim.api.nvim_create_autocmd("FileType", {
--        desc = "User: enable treesitter highlighting",
--        callback = function(ctx)
--          -- highlights
--          local hasStarted = pcall(vim.treesitter.start) -- errors for filetypes with no parser
--
--          -- indent
--          local noIndent = {}
--          if hasStarted and not vim.list_contains(noIndent, ctx.match) then
--            vim.bo.indentexpr = "v:lua.require'nvim-treesitter'.indentexpr()"
--          end
--        end,
--      })
--    end,
--  },
--}
--
-- https://github.com/nvim-treesitter/nvim-treesitter/tree/main
-- https://github.com/nvim-treesitter/nvim-treesitter/blob/main/SUPPORTED_LANGUAGES.md
--------------------------------------------------------------------------------

local ensureInstalled = {
  programmingLangs = {
    "bash", -- also used for zsh
    "javascript",
    "lua",
    "fish",
    "python",
    "ruby", -- used by Brewfile
    "rust",
    "svelte",
    "swift",
    "typescript",
    "vim",
    "c_sharp",
    "terraform",
  },
  dataFormats = {
    "json",
    "json5",
    "jsonc",
    "toml",
    "xml", -- macOS `.plist` are also xml
    "yaml",
  },
  content = {
    "css",
    "html",
    "markdown",
    "markdown_inline",
  },
  specialFiletypes = {
    "diff",
    "editorconfig",
    "git_config",
    "git_rebase",
    "gitcommit",
    "gitattributes",
    "gitignore",
    "just",
    "make",
    "query", -- treesitter query files
    "requirements", -- pip requirements file
  },
  embeddedLangs = {
    "comment",
    "graphql",
    "jsdoc",
    "luadoc",
    "luap", -- lua patterns
    "regex",
    "rst", -- python reST
  },
}

--------------------------------------------------------------------------------

return {
  "nvim-treesitter/nvim-treesitter",
  branch = "main", -- new versions follow `main`
  lazy = false,
  build = ":TSUpdate",
  config = function(_, opts)
    -- if type(opts.ensure_installed) == "table" then
    --   opts.ensure_installed = LazyVim.dedup(opts.ensure_installed)
    -- end
    -- require("nvim-treesitter.configs").setup(opts)
  end,

  opts = {
    install_dir = vim.fn.stdpath("data") .. "/treesitter",
  },
  init = function()
    -- -- To only apply the highlighting on mise files instead of all toml files
    -- require("vim.treesitter.query").add_predicate("is-mise?", function(_, _, bufnr, _)
    --   local filepath = vim.api.nvim_buf_get_name(tonumber(bufnr) or 0)
    --   local filename = vim.fn.fnamemodify(filepath, ":t")
    --   return string.match(filename, ".*mise.*%.toml$") ~= nil
    -- end, { force = true, all = false })
    --
    -- -- auto-install parsers
    -- local parsersToInstall = vim.iter(vim.tbl_values(ensureInstalled)):flatten():totable()
    -- vim.defer_fn(function()
    --   require("nvim-treesitter").install(parsersToInstall)
    -- end, 1000)
    --
    -- -- use bash parser for zsh files
    -- vim.treesitter.language.register("bash", "zsh")
    --
    -- -- auto-start highlights & indentation
    -- vim.api.nvim_create_autocmd("FileType", {
    --   desc = "User: enable treesitter highlighting",
    --   callback = function(ctx)
    --     -- highlights
    --     local hasStarted = pcall(vim.treesitter.start) -- errors for filetypes with no parser
    --
    --     -- indent
    --     local noIndent = { "bash", "zsh" }
    --     if hasStarted and not vim.list_contains(noIndent, ctx.match) then
    --       vim.bo.indentexpr = "v:lua.require'nvim-treesitter'.indentexpr()"
    --     end
    --   end,
    -- })
    --
    -- -- COMMENTS parser
    -- vim.api.nvim_create_autocmd({ "ColorScheme", "VimEnter" }, {
    --   desc = "User: Highlights for the Treesitter `comments` parser",
    --   callback = function()
    --     -- FIX todo-comments for lua and swift
    --     -- https://github.com/stsewd/tree-sitter-comment/issues/22
    --     -- https://github.com/LuaLS/lua-language-server/issues/1809
    --     vim.api.nvim_set_hl(0, "@lsp.type.comment.lua", {})
    --     vim.api.nvim_set_hl(0, "@lsp.type.comment.swift", {})
    --
    --     -- Define `@comment.bold` for `queries/comment/highlights.scm`
    --     vim.api.nvim_set_hl(0, "@comment.bold", { bold = true })
    --   end,
    -- })
  end,
}
